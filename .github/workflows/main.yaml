# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x, 22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - run: npm run build-cs
    - name: Compress Archives and IPAs
      run: |
        cd dist/centaur-scores-ui/browser
        tar -czf centaurscores-ui-site.tar.gz .
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Releases
        path: |
          dist/centaur-scores-ui/browser/centaurscores-ui-site.tar.gz
    - name: Extract version from pubspec.yaml
      id: extract_version
      run: |
        version=$(grep 'version' package.json | head -1 | cut -d '"' -f 4 | tr -d '\r')
        echo "VERSION=$version" >> $GITHUB_ENV
    - name: Check if Tag Exists
      id: check_tag
      run: |
        if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
          echo "TAG_EXISTS=true" >> $GITHUB_ENV
        else
          echo "TAG_EXISTS=false" >> $GITHUB_ENV
        fi
    - name: Modify Tag
      if: env.TAG_EXISTS == 'true'
      id: modify_tag
      run: |
        new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
        echo "VERSION=$new_version" >> $GITHUB_ENV
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: "dist/centaur-scores-ui/browser/centaurscores-ui-site.tar.gz"
        tag: v${{ env.VERSION }}
        token: ${{ secrets.TOKEN }}            
